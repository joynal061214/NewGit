package HCI;

import java.util.Date;
import java.util.GregorianCalendar;
import java.util.TimerTask;
import Classes.Client;
import Classes.Reminder;
import Classes.Schedule;
import Classes.TimeClass;
import java.applet.Applet;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.URL;
import java.sql.Time;
import java.text.DateFormat;
import java.text.Format;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/**
 * @author Joynal Abedin 01-Jun-2013
 */
public class setUpReminderFrame extends javax.swing.JFrame
{
 //Schedule addToSchedule = new Schedule();
   TimeClass clas;
//   
//    class MyDate extends java.util.Date {
//   final SimpleDateFormat yymmddFormat = new SimpleDateFormat("yyMMdd");
//
//  public MyDate (String s) throws ParseException {
//    super(yymmddFormat.parse(s).getTime());
//  }
//
//  public String toString () {
//    return yymmddFormat.format(this);
//  }
//}
    /**
     * Creates new form setUpReminderFrame
     */
    public setUpReminderFrame()
    {
        initComponents();
        this.setIconImage(new ImageIcon("legal.gif").getImage());

        // centre the user interface on the screen
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        setLocation((screenSize.width - getWidth()) / 2,
                (screenSize.height - getHeight()) / 2);


        final DateFormat timeFormat = new SimpleDateFormat(
                "EEE- dd-MM-YYYY,  HH:mm:ss");
        ActionListener timerListener = new ActionListener()
        {
            public void actionPerformed(ActionEvent e)
            {
                Date date = new Date();
                String time = timeFormat.format(date);
                jLabel1.setText("The Current Date and Time is: " + time);

            }
        };

        Timer time = new javax.swing.Timer(1000, timerListener);
        time.setInitialDelay(0);
        time.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPanel1 = new javax.swing.JPanel();
        CreateRemiderjButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        DurationSoundComboBox3 = new javax.swing.JComboBox();
        SoundComboBox4 = new javax.swing.JComboBox();
        MinuteComboBox2 = new javax.swing.JComboBox();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        AlarmDescriptionTextField = new javax.swing.JTextField();
        HourComboBox1 = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jcheckTimeutton1 = new javax.swing.JButton();
        IDjTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jPanel = new javax.swing.JPanel();
        SearchAreminderButton = new javax.swing.JButton();
        BackjButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        CreateRemiderjButton.setText("Create a New Reminder");
        CreateRemiderjButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                CreateRemiderjButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Select duration of sound");

        jLabel7.setText("Select a sound");

        jLabel4.setText("Select hour");

        jLabel5.setText("Select minute");

        DurationSoundComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));

        SoundComboBox4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00" }));

        MinuteComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));

        jLabel2.setText("Give a description of alarm");

        HourComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" }));

        jLabel3.setText("Select a date");

        jcheckTimeutton1.setText("check time");
        jcheckTimeutton1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jcheckTimeutton1ActionPerformed(evt);
            }
        });

        IDjTextField.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                IDjTextField_FocusLost(evt);
            }
        });

        jLabel8.setText("Enter the client ID for the new Reminder");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(175, 175, 175)
                .addComponent(jcheckTimeutton1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(54, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AlarmDescriptionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(CreateRemiderjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel4)
                                .addComponent(jLabel5)
                                .addComponent(jLabel7)
                                .addComponent(jLabel6))
                            .addGap(20, 20, 20)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(DurationSoundComboBox3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(MinuteComboBox2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(HourComboBox1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(10, 10, 10)
                                    .addComponent(SoundComboBox4, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(IDjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IDjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AlarmDescriptionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(HourComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MinuteComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DurationSoundComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SoundComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(40, 40, 40)
                .addComponent(CreateRemiderjButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 100, Short.MAX_VALUE)
                .addComponent(jcheckTimeutton1)
                .addGap(97, 97, 97))
        );

        jPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        SearchAreminderButton.setText("Search a Reminder");

        BackjButton.setText("Go to main window");
        BackjButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                BackjButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelLayout = new javax.swing.GroupLayout(jPanel);
        jPanel.setLayout(jPanelLayout);
        jPanelLayout.setHorizontalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(SearchAreminderButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BackjButton)
                .addGap(50, 50, 50))
        );
        jPanelLayout.setVerticalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SearchAreminderButton)
                    .addComponent(BackjButton))
                .addGap(80, 80, 80))
        );

        jPanel3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, new java.awt.Color(0, 102, 51), new java.awt.Color(0, 153, 153)));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(263, 263, 263)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(324, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CreateRemiderjButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_CreateRemiderjButtonActionPerformed
    {//GEN-HEADEREND:event_CreateRemiderjButtonActionPerformed
        /*
         * Converting date to milliseconds
         */   
        Date FromUserDate; 
          SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy, HH:mm");
          String inputString = String.valueOf(HourComboBox1.getSelectedItem())+":" 
              + String.valueOf(MinuteComboBox2.getSelectedIndex());
             SimpleDateFormat formatter = new SimpleDateFormat("dd-MMM-yyyy");
       try
       {
           FromUserDate = sdf.parse(formatter.format(jDateChooser1.getDate())+ ", "+  inputString);
           long convert = FromUserDate.getTime();
             System.out.println("millisecs are: "+convert);
             System.out.println("Current millis are: "+System.currentTimeMillis());
             if (convert < System.currentTimeMillis())
           {
               JOptionPane.showMessageDialog(this, "Date or time is before the current time"
                       + " \n Enter a time in the future");
           }
             else{
        
            EntityManagerFactory emf = Persistence.createEntityManagerFactory("slSystemPU");
            EntityManager em = emf.createEntityManager();
            em.getTransaction().begin();
            Client cl = new Client();
            int id = Integer.parseInt(IDjTextField.getText().trim());
            cl = em.getReference(Client.class, id);
     
            int sound = SoundComboBox4.getSelectedIndex();
            byte[] alarmSound;

                      
            long durationTime = (DurationSoundComboBox3.getSelectedIndex());
           Time time = new Time(durationTime);
        
            Reminder remi = new Reminder();
            remi.setDescription(AlarmDescriptionTextField.getText());
            remi.setReminderDtTime(inputDate(jDateChooser1.getDate()));
            remi.setClientId(cl);

           
         Query query = em.createNativeQuery("select max(reminder_id) as last_id from reminder");
         long val = (Long)query.getSingleResult();   
       
            remi.setReminderId((int)val);
            remi.setReviewed(0);
         System.out.println(cl.getClientId() + " Joynal " + cl.getFirstName());
         

         
         em.persist(remi);

            
            em.getTransaction().commit();

            
            JOptionPane.showMessageDialog(null,
                    " The new reminder is saved successfully ");

            em.close();
            
          }
       }
       catch (ParseException ex)
       {
           ex.printStackTrace();
       }

    }//GEN-LAST:event_CreateRemiderjButtonActionPerformed

    public  Date inputDate(Date FromUser){
          SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy, HH:mm");
      //    sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
        String inputString = String.valueOf(HourComboBox1.getSelectedItem())+":" 
                    + String.valueOf(MinuteComboBox2.getSelectedIndex());
       try
       {
           SimpleDateFormat formatter = new SimpleDateFormat("dd-MMM-yyyy");
           //System.out.println(formatter.format(jDateChooser1.getDate())+ ", "+  inputString);
            FromUser = sdf.parse(formatter.format(jDateChooser1.getDate())+ ", "+  inputString);
           long convert = FromUser.getTime();
           GregorianCalendar calendar = new GregorianCalendar();
      
           calendar.setTimeInMillis(convert);
           sdf.format(calendar.getTime());
           System.out.println((FromUser.getTime()));// to millisecs
           System.out.println( sdf.format(calendar.getTime()));
          
           
       }
       catch (ParseException ex)
       {
           ex.printStackTrace();
       }
        
        return FromUser;
    }
    
    public void MakeBeepSound(long delay){
//        
//        Scanner scan = new Scanner(System.in);
//        System.out.print("Enter a delay in seconds: ");
 //     delay = scan.nextInt()*1000;

        final java.util.Timer timer = new java.util.Timer();

        final TimerTask task = new TimerTask() {
            @Override
            public void run() {
                try
                {
                    int x = DurationSoundComboBox3.getSelectedIndex()*1000;
                   for (int i =x ; i >=0; i--)
                    {
                    Toolkit.getDefaultToolkit().beep();
                    Thread.sleep(2000);
                   timer.cancel();
                    timer.purge(); 
                    }
             
                }
                catch (InterruptedException ex)
                {
                    ex.printStackTrace();
                }
            }
        };
        timer.schedule(task, delay);
        
    }
    
    private void plyaSound()
    { // not working

        String defSounds[] =
        {
//"file:///javasrc/graphics/test.wav",
//"file:///music/midi/Beet5th.mid",
            "SleepAway.mp3"
        };
        String[] av =
        {
        };
        if (av.length == 0)
        {
            main(defSounds);
        }
        else
        {
            for (int i = 0; i < av.length; i++)
            {
                System.out.println("Starting " + av[i]);
                try
                {
                    URL snd = new URL(av[i]);
// open to see if works or throws exception, close to free fd's
// snd.openConnection().getInputStream( ).close( );
                    Applet.newAudioClip(snd).play();
                }
                catch (Exception e)
                {
                    System.err.println(e);

                }
            }
        }
// With this call, program exits before/during play.
// Without it, on some versions, program hangs forever after play.
// System.exit(0);
    
    }

    private void jcheckTimeutton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jcheckTimeutton1ActionPerformed
    {//GEN-HEADEREND:event_jcheckTimeutton1ActionPerformed

//        DateFormat dformat = new SimpleDateFormat("EEE-dd-MM-YYYY, HH:mm:ss");
//        //    Date date = new Date();
//        String Time = dformat.format(jDateChooser1.getDate());
//        System.out.println("show date: " + Time);
//    
//        Toolkit.getDefaultToolkit().beep();// this line is for beep default window sound.
//        Time getTime = new Time(HourComboBox1.getSelectedIndex(),
//                MinuteComboBox2.getSelectedIndex(), 0);
//        System.out.println("Time selected:  " + getTime);
//        
//        System.out.println();
//        
//        
//        String hour = String.valueOf(HourComboBox1.getSelectedIndex());
//          String minute = String.valueOf(MinuteComboBox2.getSelectedIndex());
//       int getD = Integer.parseInt(Time);
//           GregorianCalendar cal = new GregorianCalendar();
//           cal.set(HourComboBox1.getSelectedIndex(),MinuteComboBox2.getSelectedIndex(), 0);
//      cal.set(getD,0, HourComboBox1.getSelectedIndex(),MinuteComboBox2.getSelectedIndex(), 0);
//
//          
////        DateFormat timeFormat = new SimpleDateFormat(
//       //         Time+hour+minute);
//          Date dt = new Date();
//          
//          dt =     cal.getTime();
//          
//        dformat.format(dt);
//    
//         System.out.println(dt);
//        
       
  MainWindowFrame frame = new MainWindowFrame();
        frame.setVisible(true);
        dispose();

    }//GEN-LAST:event_jcheckTimeutton1ActionPerformed

    private void BackjButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_BackjButtonActionPerformed
    {//GEN-HEADEREND:event_BackjButtonActionPerformed
        MainWindowFrame frame = new MainWindowFrame();
        frame.setVisible(true);
        dispose();
    }//GEN-LAST:event_BackjButtonActionPerformed

    private void IDjTextField_FocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_IDjTextField_FocusLost
    {//GEN-HEADEREND:event_IDjTextField_FocusLost
        try
        { // when focus lost & cant read anything
            int id = Integer.parseInt(IDjTextField.getText());
        }
        catch (NumberFormatException exc)
        {
            JOptionPane.showMessageDialog(null,
                    "No number found!!!!! \nMust enter a number for Client number",
                    "Input Error", JOptionPane.ERROR_MESSAGE);
            IDjTextField.isFocusable();
            IDjTextField.setText("");

        }
    }//GEN-LAST:event_IDjTextField_FocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(
                    setUpReminderFrame.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(
                    setUpReminderFrame.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(
                    setUpReminderFrame.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(
                    setUpReminderFrame.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new setUpReminderFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AlarmDescriptionTextField;
    private javax.swing.JButton BackjButton;
    private javax.swing.JButton CreateRemiderjButton;
    private javax.swing.JComboBox DurationSoundComboBox3;
    private javax.swing.JComboBox HourComboBox1;
    private javax.swing.JTextField IDjTextField;
    private javax.swing.JComboBox MinuteComboBox2;
    private javax.swing.JButton SearchAreminderButton;
    private javax.swing.JComboBox SoundComboBox4;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton jcheckTimeutton1;
    // End of variables declaration//GEN-END:variables
}
